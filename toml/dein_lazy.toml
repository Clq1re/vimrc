#########################################
# Syntax checker
#########################################
[[plugins]]
repo = 'w0rp/ale'
hook_add = '''

" For airline
let g:airline#extensions#ale#enabled = 1

" Always display sign_column
let g:ale_sign_column_always = 1

" Lint timing settings
let g:ale_lint_on_text_changed = 0
let g:ale_lint_on_insert_leave = 1
let g:ale_lint_on_save = 1

" Delay settings
let g:ale_lint_delay = 10

" Statusline mark
let g:ale_statusline_format = ['⨉ %d', '⚠ %d', '⬥ ok']
let g:ale_sign_error = 'x'
let g:ale_sign_warning = '?'

" Fix settings
let g:ale_fix_on_save = 1

" Specify linters
let g:ale_linters = {
  \ 'javascript': ['standard'],
  \ 'vue': ['eslint','vls'],
  \ 'python': ['pylint'],
\ }

let b:ale_fixers = ['eslint']
let g:ale_python_flake8_use_global = 1
let g:ale_linter_aliases = {'vue': ['vue', 'pug','javascript', 'scss', 'css']}

" Specify fixers
let g:ale_fixers = {
  \ 'javascript': ['eslint'],
  \ 'python': ['autopep8', 'isort'],
\ }

'''

hook_post_source = '''

nmap <silent> [call]k <Plug>(ale_previous_wrap)
nmap <silent> [call]j <Plug>(ale_next_wrap)
nmap <silent> [call]o <Plug>(ale_toggle)
nmap <silent> [call]d <Plug>(ale_detail)

'''
on_ft = ['python', 'javascript', 'vue']

#########################################
# Syntac highlight for Vue.js plugin
#########################################
[[plugins]]
repo = 'posva/vim-vue'
hook_add = '''
au BufRead,BufNewFile *.vue setlocal filetype=vue
au BufWinEnter *.vue exe ':syntax sync fromstart'
'''
on_ft = ['vue']

#########################################
# Auto coding settings
#########################################
[[plugins]]
repo = 'cohama/lexima.vim'
hook_add = '''
let g:lexima_enable_newline_rules	= 1
let g:lexima_enable_space_rules = 1

" If b:lexima_disabled is 1, lexima plugin will not work.
nnoremap <silent> [call]2 :call <SID>toggle_auto_coding()<CR>
function! s:toggle_auto_coding()
    if exists("b:lexima_disabled")
        if b:lexima_disabled
            let b:lexima_disabled = 0
            echo 'lexima is enabled'
        else
            let b:lexima_disabled = 1
            echo 'lexima is disabled'
        endif
    else
        let b:lexima_disabled = 1
        echo 'lexima is disabled'
    endif

endfunction
'''

hook_post_source = '''
" --------- For comma rule ----------
call lexima#add_rule({
\   "at" : '\%# ',
\   "char" : ",",
\   "input" : ",",
\})

call lexima#add_rule({
\   "at" : '\%#',
\   "char" : ",",
\   "input" : ",<Space>",
\})

call lexima#add_rule({
\   "at" : ', \%#',
\   "char" : '<Space>',
\   "input" : "",
\})

" -------- For parenthesis rule --------
" ----- Input -----
call lexima#add_rule({
\   "char" : '{',
\   "at" : '[A-Za-z]\%#',
\   "input" : ' {}<Left>',
\})

call lexima#add_rule({
\   "char" : '{',
\   "at" : ')\%#',
\   "input" : ' {}<Left>',
\})

call lexima#add_rule({
\   "char" : '{',
\   "at" : '>\%#',
\   "input" : ' {}<Left>',
\})

call lexima#add_rule({
\   "char" : '{',
\   "at" : ':\%#',
\   "input" : ' {}<Left>',
\})
'''
on_i = 1
