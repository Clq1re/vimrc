#########################################
# Dein plugin manager settings
#########################################
[[plugins]]
repo = 'Shougo/dein.vim'
hook_add = '''
let g:python_host_prog = expand('~/.pyenv/versions/2.7.13/bin/python2')
let g:python3_host_prog = expand('~/.pyenv/versions/3.7.2/bin/python3')
let g:ruby_host_prog = $HOME . '/.rbenv/shims/ruby'
autocmd VimEnter * call dein#call_hook('post_source')
'''

#########################################
# Language servers settings
#########################################
[[plugins]]
repo = 'neoclide/coc.nvim'
merge = 0
rev = 'release'
hook_add = '''
" coc.nvim

" if hidden is not set, TextEdit might fail.
set hidden

" Some servers have issues with backup files, see #649
set nobackup
set nowritebackup

" Better display for messages
set cmdheight=2

" Smaller updatetime for CursorHold & CursorHoldI
set updatetime=300

" don't give |ins-completion-menu| messages.
set shortmess+=c

" always show signcolumns
set signcolumn=yes

" Use tab for trigger completion with characters ahead and navigate.
" Use command ':verbose imap <tab>' to make sure tab is not mapped by other plugin.
inoremap <silent><expr> <TAB>
      \ pumvisible() ? "\<C-n>" :
      \ <SID>check_back_space() ? "\<TAB>" :
      \ coc#refresh()
inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

" Use <c-space> to trigger completion.
inoremap <silent><expr> <c-space> coc#refresh()

" Use <cr> to confirm completion, `<C-g>u` means break undo chain at current position.
" Coc only does snippet and additional edit on confirm.
inoremap <expr> <cr> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"

" Remap keys for gotos
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)

" Use K to show documentation in preview window
nnoremap <silent> K :call <SID>show_documentation()<CR>

function! s:show_documentation()
  if (index(['vim','help'], &filetype) >= 0)
    execute 'h '.expand('<cword>')
  else
    call CocAction('doHover')
  endif
endfunction

" Highlight symbol under cursor on CursorHold
autocmd CursorHold * silent call CocActionAsync('highlight')

" Remap for rename current word
nmap <space>rn <Plug>(coc-rename)

" Remap for format selected region
xmap <space>f  <Plug>(coc-format-selected)
nmap <space>f  <Plug>(coc-format-selected)

augroup mygroup
  autocmd!
  " Setup formatexpr specified filetype(s).
  autocmd FileType typescript,json setl formatexpr=CocAction('formatSelected')
  " Update signature help on jump placeholder
  autocmd User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')
augroup end

" Remap for do codeAction of selected region, ex: `<space>aap` for current paragraph
xmap <space>a  <Plug>(coc-codeaction-selected)
nmap <space>a  <Plug>(coc-codeaction-selected)

" Remap for do codeAction of current line
nmap <space>ac  <Plug>(coc-codeaction)
" Fix autofix problem of current line
nmap <space>qf  <Plug>(coc-fix-current)

" Use `:Format` to format current buffer
command! -nargs=0 Format :call CocAction('format')

" Use `:Fold` to fold current buffer
command! -nargs=? Fold :call     CocAction('fold', <f-args>)

" Using CocList
" Show all diagnostics
nnoremap <silent> <space>a  :<C-u>CocList diagnostics<cr>

" Jump navigate diagnostics
nmap <silent> <space>k <Plug>(coc-diagnostic-prev)
nmap <silent> <space>j <Plug>(coc-diagnostic-next)

" Do default action for next item.
nnoremap <silent> <space>p  :<C-u>CocNext<CR>
" Do default action for previous item.
nnoremap <silent> <space>n  :<C-u>CocPrev<CR>

" Manage extensions
nnoremap <silent> <space>e  :<C-u>CocList extensions<cr>
" Show commands
nnoremap <silent> <space>c  :<C-u>CocList commands<cr>

" Find symbol of current document
nnoremap <silent> <space>o  :<C-u>CocList outline<cr>
" Search workspace symbols
nnoremap <silent> <space>s  :<C-u>CocList -I symbols<cr>

" For prettier settings
command! -nargs=0 Prettier :CocCommand prettier.formatFile

" For coc-yank
nnoremap <silent> <space>y  :<C-u>CocList -A --normal yank<cr>
'''

#########################################
# Change window's size settings
#########################################
[[plugins]]
repo = 'simeji/winresizer'
hook_add = '''
nnoremap <space>t :WinResizerStartResize<CR>
'''

#########################################
# Nerdtree settings
#########################################
[[plugins]]
repo = 'scrooloose/nerdtree'
hook_add = '''
map <silent> <space>b :NERDTreeToggle<CR>
'''
[[plugins]]
repo = 'tiagofumo/vim-nerdtree-syntax-highlight'
hook_add = '''
let g:NERDTreeLimitedSyntax = 1
'''

#########################################
# Dispaly idnent vertically line
#########################################
[[plugins]]
repo = 'Yggdroot/indentLine'

hook_add = '''
nnoremap <silent> <space>it :IndentLinesToggle<CR>
let g:indentLine_color_term = 113
'''

#########################################
# Vim-tags settings
#########################################
[[plugins]]
repo = 'szw/vim-tags'

hook_add = '''
 let g:vim_tags_auto_generate = 0

" Update tags
nnoremap <space>cg :TagsGenerate<CR>
nmap <space>co &:tag <C-r>"
nnoremap <C-h> :vsp<CR> :exe("tjump ".expand('<cword>'))<CR>
nnoremap <space>cj <C-w>}
" Close Tlist besides
nnoremap <silent> <space>cc :pc<CR>:TlistClose<CR>

" Register ctags directory
au BufNewFile,BufRead * let g:currentFileDirectory = expand('%:p:h')
au BufNewFile,BufRead *.java let g:vim_tags_project_tags_command = "/usr/local/bin/ctags -R -a -f ~/.tagList/java.tags " . g:currentFileDirectory
au BufNewFile,BufRead *.py let g:vim_tags_project_tags_command = "/usr/local/bin/ctags -R -a -f ~/.tagList/py.tags " . g:currentFileDirectory
au BufNewFile,BufRead *.js let g:vim_tags_project_tags_command = "/usr/local/bin/ctags -R -a -f ~/.tagList/js.tags " . g:currentFileDirectory
au BufNewFile,BufRead *.php let g:vim_tags_project_tags_command = "/usr/local/bin/ctags -R -a -f ~/.tagList/php.tags " . g:currentFileDirectory
au BufNewFile,BufRead *.scss let g:vim_tags_project_tags_command = "/usr/local/bin/ctags -R -a -f ~/.tagList/scss.tags " . g:currentFileDirectory

" Set tags
au BufNewFile,BufRead *.java set tags=$HOME/.tagList/java.tags
au BufNewFile,BufRead *.py set tags=$HOME/.tagList/py.tags
au BufNewFile,BufRead *.js set tags=$HOME/.tagList/js.tags
au BufNewFile,BufRead *.php set tags=$HOME/.tagList/php.tags
'''

#########################################
# Ctags setting
#########################################
[[plugins]]
repo = 'vim-scripts/taglist.vim'
hook_add = '''
nnoremap <silent> <space>cl :TlistToggle<CR>/

" Original javascript settings
let g:tlist_javascript_settings = 'js;n:constant;o:object;c:class;f:function;m:method;v:variable'
let g:tlist_python_settings = 'Python;c:classes;f:functions;m:class members;v:variables;i:imports'
let g:tlist_scss_settings = 'scss;m:mixins;v:variables;c:classes;i:ids;d:media'
let g:Tlist_GainFocus_On_ToggleOpen = 1
let g:Tlist_Exit_OnlyWindow = 1
let g:Tlist_Auto_Highlight_Tag = 1
let g:Tlist_Show_One_File = 1
let g:Tlist_Display_Prototype = 1
let g:Tlist_Process_File_Always = 1
let g:Tlist_Close_On_Select = 1
let Tlist_Ctags_Cmd = "/usr/local/bin/ctags"
'''

#########################################
# Comment out
#########################################
[[plugins]]
repo = 'tpope/vim-commentary'

#########################################
# Syntac highlight
#########################################
[[plugins]]
repo = 'sheerun/vim-polyglot'

#########################################
# Surround settings
#########################################
[[plugins]]
repo = 'tpope/vim-surround'

[[plugin]]
repo = 'tpope/vim-repeat'

#########################################
# To make git even in vim
#########################################
[[plugins]]
repo = 'tpope/vim-fugitive'
hook_add = '''
nmap [fugitive] <Nop>
map <C-g> [fugitive]
nmap <silent> [fugitive]s :Gstatus<CR>
nmap <silent> [fugitive]d :Gdiff<CR>
nmap <silent> [fugitive]b :Gblame<CR>
nmap <silent> [fugitive]l :Glog<CR>
nmap <silent> [fugitive]r :Gread<CR>
'''
