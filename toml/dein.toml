#########################################
#dein
#########################################
[[plugins]]
repo = 'Shougo/dein.vim'
hook_add = '''
let g:python_host_prog =  $HOME . '/.pyenv/shims/python2'
let g:python3_host_prog = $HOME . '/.pyenv/shims/python3'
let g:ruby_host_prog = $HOME . '/.rbenv/shims/ruby'
'''

#########################################
#denite
#########################################
[[plugins]]
repo = 'Shougo/denite.nvim'
hook_add = '''
map s [denite]

nmap <silent> [denite]p :<C-u>DeniteBufferDir file_rec -highlight-mode-insert=Search<CR>
nmap <silent> [denite]r :<C-u>DeniteProjectDir file_rec -highlight-mode-insert=Search<CR>
nmap <silent> [denite]b :<C-u>Denite buffer -highlight-mode-insert=Search<CR>
nmap <silent> [denite]y :<C-u>Denite file_old -highlight-mode-insert=Search<CR>
nmap <silent> [denite]s :<C-u>Denite line -auto-preview -highlight-mode-insert=Search<CR>
nmap <silent> [denite]h :<C-u>Denite help -highlight-mode-insert=Search<CR>
nmap <silent> [denite]w :<C-u>Denite -auto-preview -highlight-mode-insert=Search grep<CR>
call denite#custom#map('insert', 'jj', '<denite:enter_mode:normal>', 'noremap')
call denite#custom#source('file_rec', 'matchers', ['matcher_cpsm','matcher_ignore_globs'])
" customize ignore globs
call denite#custom#filter('matcher_ignore_globs', 'ignore_globs',
        \ [
        \ '.git/', '.gomi/', '.undo/',
        \ 'images/', '*.o', '*.make',
        \ '*.min.*', 'img/', 'fonts/', 
        \ 'images/', '.DS_Store', '.eslintcache',
        \ '.npm', 'node_modules/', 'jspm_packages/',
        \ 'build/Release', '.lock-wscript', 'bower_components',
        \ '.grunt', '.nyc_output', 'coverage',
        \ 'lib-cov', '*.pid', 'pids',
        \ '*.seed', '*.pid.lock', 'logs',
        \ '*.log', 'npm-debug.log*', 'yarn-debug.log',
        \ 'yarn-error.log', '*.?*cache*', '*css.map', 
        \ '*.css'
        \ ])
'''

[[plugins]]
repo = 'nixprime/cpsm'
build = 'env PY3=ON ./install.sh'

#########################################
#Change window's size
#########################################
[[plugins]]
repo = 'simeji/winresizer'
hook_add = '''
let g:winresizer_start_key = '<C-T>'
'''

#########################################
#To make git unable even in vim
#########################################
[[plugins]]
repo = 'tpope/vim-fugitive'
hook_add = '''
nmap [figitive] <Nop>
map <C-g> [figitive]
nmap <silent> [figitive]s :<C-u>Gstatus<CR>
nmap <silent> [figitive]d :<C-u>Gdiff<CR>
nmap <silent> [figitive]b :<C-u>Gblame<CR>
nmap <silent> [figitive]l :<C-u>Glog<CR>
nmap <silent> [figitive]r :<C-u>Gread<CR>
nmap <silent> [figitive]a :<C-u>Gwrite<CR>
'''

#########################################
#Nerdtree
#########################################
[[plugins]]
repo = 'scrooloose/nerdtree'

[[plugins]]
repo = 'Xuyuanp/nerdtree-git-plugin'
hook_add = '''
let g:NERDTreeIndicatorMapCustom = {
    \ "Modified"  : "✹",
    \ "Staged"    : "✚",
    \ "Untracked" : "✭",
    \ "Renamed"   : "➜",
    \ "Unmerged"  : "═",
    \ "Deleted"   : "✖",
    \ "Dirty"     : "✗",
    \ "Clean"     : "✔︎",
    \ 'Ignored'   : '☒',
    \ "Unknown"   : "?"
    \ }

    map <silent> [call]b :NERDTreeToggle<CR>
'''

#########################################
#Auto coding
#########################################
[[plugins]]
repo = 'cohama/lexima.vim'
hook_add = '''

"if b:lexima_disabled is 1, lexima plugin will not work.
nnoremap <silent> 2 :call <SID>toggle_auto_coding()<CR>

function! s:toggle_auto_coding()
    if exists("b:lexima_disabled")
        if b:lexima_disabled
            let b:lexima_disabled = 0
            echo 'Auto Coding is enabled'
        else
            let b:lexima_disabled = 1
            echo 'Auto Coding is disabled'
        endif
    else
        let b:lexima_disabled = 1
        echo 'Auto Coding is disabled'
    endif
endfunction

'''
#########################################
#YCM
#########################################
[[plugins]]
repo = 'Valloric/YouCompleteMe'
hook_add = '''

let g:ycm_confirm_extra_conf = 0
let g:ycm_global_ycm_extra_conf = '~/.cache/dein/repos/github.com/Valloric/YouCompleteMe/third_party/ycmd/examples/.ycm_extra_conf.py'
let g:ycm_always_populate_location_list = 1
imap <expr> <buffer> <tab> pumvisible() ? "\<c-n>" : "\<tab>"
nmap <silent> [call]j :lnext<CR>
nmap <silent> [call]k :lprevious<CR>
augroup c_mapping
autocmd!

autocmd FileType c nnoremap [call]f :YcmCompleter FixIt<CR>

augroup END

'''
merged = 0

[[plugins]]
repo = 'rdnetto/YCM-Generator'

[[plugins]]
repo = 'ervandew/supertab'

[[plugins]]
repo = 'honza/vim-snippets'

[[plugins]]
repo = 'eclipse/eclipse.jdt.ls'

[[plugins]]
repo = 'SirVer/ultisnips'
hook_add = '''

"Completion Config
let g:UltiSnipsSnippetDirectories = [$HOME . '/.cache/dein/repos/github.com/honza/vim-snippets/custom']
let g:ycm_autoclose_preview_window_after_insertion = 1
let g:ycm_add_preview_to_completeopt=0
let g:syntastic_java_checkers = []
let g:EclimFileTypeValidate = 0
let g:SuperTabDefaultCompletionType    = '<C-k>'
let g:SuperTabCrMapping                = 0
let g:UltiSnipsExpandTrigger           = '<C-k>'
let g:UltiSnipsEditSplit="vertical"

"Python path Config
let g:ycm_python_binary_path = 'python'
'''
#########################################
#surround
#########################################
[[plugins]]
repo = 'tpope/vim-surround'

#########################################
#########################################
