#########################################
#dein
#########################################
[[plugins]]
repo = 'Shougo/dein.vim'
hook_add = '''
let g:python_host_prog = $HOME . '/.pyenv/shims/python2.7'
let g:python3_host_prog = $HOME . '/.pyenv/shims/python3.6'
'''

#########################################
#denite
#########################################
[[plugins]]
repo = 'Shougo/denite.nvim'
hook_add = '''
map s [denite]

nmap <silent> [denite]p :<C-u>Denite file_rec -highlight-mode-insert=Search<CR>
nmap <silent> [denite]b :<C-u>Denite buffer -highlight-mode-insert=Search<CR>
nmap <silent> [denite]y :<C-u>Denite file_old -highlight-mode-insert=Search<CR>
nmap <silent> [denite]s :<C-u>Denite line -auto-preview -highlight-mode-insert=Search<CR>
nmap <silent> [denite]h :<C-u>Denite help -highlight-mode-insert=Search<CR>
nmap <silent> [denite]w :<C-u>Denite -auto-preview -highlight-mode-insert=Search grep<CR>
call denite#custom#map('insert', 'jj', '<denite:enter_mode:normal>', 'noremap')
call denite#custom#source('file_rec', 'matchers', ['matcher_fuzzy','matcher_ignore_globs'])
" customize ignore globs
call denite#custom#filter('matcher_ignore_globs', 'ignore_globs',
      \ [
      \ '.git/', '.gomi/', '.undo/',
      \ 'images/', '*.o', '*.make',
      \ '*.min.*',
      \ 'img/', 'fonts/'])
'''

#########################################
#Change window's size
#########################################
[[plugins]]
repo = 'simeji/winresizer'
hook_add = '''
let g:winresizer_start_key = '<C-T>'
'''

#########################################
#Emmet
#########################################
[[plugins]]
repo = 'mattn/emmet-vim'
hook_add = '''
let g:user_emmet_mode='ni'
let g:user_emmet_install_gloabal = 0
let g:user_emmet_leader_key='<C-Y>'
'''

#########################################
#To make git unable even in vim
#########################################
[[plugins]]
repo = 'tpope/vim-fugitive'
hook_add = '''
nmap [figitive] <Nop>
map <C-g> [figitive]
nmap <silent> [figitive]s :<C-u>Gstatus<CR>
nmap <silent> [figitive]d :<C-u>Gdiff<CR>
nmap <silent> [figitive]b :<C-u>Gblame<CR>
nmap <silent> [figitive]l :<C-u>Glog<CR>
nmap <silent> [figitive]r :<C-u>Gread<CR>
nmap <silent> [figitive]a :<C-u>Gwrite<CR>
'''

#########################################
#Nerdtree
#########################################
[[plugins]]
repo = 'scrooloose/nerdtree'

[[plugins]]
repo = 'Xuyuanp/nerdtree-git-plugin'
hook_add = '''
let g:NERDTreeIndicatorMapCustom = {
    \ "Modified"  : "✹",
    \ "Staged"    : "✚",
    \ "Untracked" : "✭",
    \ "Renamed"   : "➜",
    \ "Unmerged"  : "═",
    \ "Deleted"   : "✖",
    \ "Dirty"     : "✗",
    \ "Clean"     : "✔︎",
    \ 'Ignored'   : '☒',
    \ "Unknown"   : "?"
    \ }

    map <C-b> :NERDTreeToggle<CR>
'''

#########################################
#Auto coding
#########################################
[[plugins]]
repo = 'cohama/lexima.vim'
hook_add = '''

"if b:lexima_disabled is 1, lexima plugin will not work.
nnoremap <silent> 2 :call <SID>toggle_auto_coding()<CR>

function! s:toggle_auto_coding()
    if exists("b:lexima_disabled")
        if b:lexima_disabled
            let b:lexima_disabled = 0
            echo 'Auto Coding is enabled'
        else
            let b:lexima_disabled = 1
            echo 'Auto Coding is disabled'
        endif
    else
        let b:lexima_disabled = 1
        echo 'Auto Coding is disabled'
    endif
endfunction

'''
#########################################
#YCM
#########################################
[[plugins]]
repo = 'Valloric/YouCompleteMe'
hook_add = '''

let g:ycm_confirm_extra_conf = 0
let g:ycm_global_ycm_extra_conf = '~/.cache/dein/repos/github.com/Valloric/YouCompleteMe/third_party/ycmd/examples/.ycm_extra_conf.py'

augroup c_mapping
autocmd!

autocmd FileType c nnoremap [call]f :YcmCompleter FixIt<CR>

augroup END

'''
merged = 0

[[plugins]]
repo = 'rdnetto/YCM-Generator'

[[plugins]]
repo = 'ervandew/supertab'

[[plugins]]
repo = 'honza/vim-snippets'

[[plugins]]
repo = 'eclipse/eclipse.jdt.ls'

[[plugins]]
repo = 'SirVer/ultisnips'
hook_add = '''

"Completion Config
let g:UltiSnipsSnippetDirectories = [$HOME . '/.cache/dein/repos/github.com/honza/vim-snippets/custom']
let g:ycm_autoclose_preview_window_after_insertion = 1
let g:ycm_add_preview_to_completeopt=0
let g:syntastic_java_checkers = []
let g:EclimFileTypeValidate = 0
let g:SuperTabDefaultCompletionType    = '<C-k>'
let g:SuperTabCrMapping                = 0
let g:UltiSnipsExpandTrigger           = '<C-k>'
let g:UltiSnipsJumpForwardTrigger      = '<tab>'
let g:UltiSnipsJumpBackwardTrigger     = '<s-tab>'
let g:UltiSnipsEditSplit="vertical"

"Python path Config
let g:ycm_python_binary_path = 'python'
'''
#########################################
#########################################
