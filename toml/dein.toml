#########################################
# Dein plugin manager settings
#########################################
[[plugins]]
repo = 'Shougo/dein.vim'
hook_add = '''
let g:python_host_prog =  $HOME . '/.pyenv/shims/python2'
let g:python3_host_prog = $HOME . '/.pyenv/shims/python3'
let g:ruby_host_prog = $HOME . '/.rbenv/shims/ruby'
'''

#########################################
# Denite settings
#########################################
[[plugins]]
repo = 'Shougo/denite.nvim'
hook_add = '''
map s [denite]

nmap <silent> [denite]p :<C-u>DeniteBufferDir file_rec -highlight-mode-insert=Search<CR>
nmap <silent> [denite]r :<C-u>DeniteProjectDir file_rec -highlight-mode-insert=Search<CR>
nmap <silent> [denite]b :<C-u>Denite buffer -highlight-mode-insert=Search<CR>
nmap <silent> [denite]y :<C-u>Denite file_old -highlight-mode-insert=Search<CR>
nmap <silent> [denite]s :<C-u>Denite line -highlight-mode-insert=Search<CR>
nmap <silent> [denite]h :<C-u>Denite help -highlight-mode-insert=Search<CR>
nmap <silent> [denite]w :<C-u>Denite -highlight-mode-insert=Search grep<CR>

" Open a file in split vertically
call denite#custom#map('normal', '`', '<denite:do_action:vsplit>', 'noremap')
call denite#custom#map('insert', '`', '<denite:do_action:vsplit>', 'noremap')

" Leave inset mode
call denite#custom#map('insert', 'jj', '<denite:enter_mode:normal>', 'noremap')

" Quit Denite
call denite#custom#map('normal', '<esc>', '<denite:quit>', 'noremap')
call denite#custom#map('insert', '<esc>', '<denite:quit>', 'noremap')
call denite#custom#source('file_rec', 'matchers', ['matcher_cpsm','matcher_ignore_globs'])
call denite#custom#source('file_old', 'matchers', ['matcher_cpsm','matcher_ignore_globs'])
call denite#custom#source('grep', 'matchers', ['matcher_cpsm','matcher_ignore_globs'])

" Customize ignore globs
call denite#custom#filter('matcher_ignore_globs', 'ignore_globs',
        \ [
        \ '.git/', '.gomi/', '.undo/',
        \ 'images/', '*.o', '*.make',
        \ '*.min.*', 'img/', 'fonts/',
        \ 'images/', '.DS_Store', '.eslintcache',
        \ '.npm', 'node_modules/', 'jspm_packages/',
        \ 'build/Release', '.lock-wscript', 'bower_components',
        \ '.grunt', '.nyc_output', 'coverage',
        \ 'lib-cov', '*.pid', 'pids',
        \ '*.seed', '*.pid.lock', 'logs',
        \ '*.log', 'npm-debug.log*', 'yarn-debug.log',
        \ 'yarn-error.log', '*.?*cache*', '*css.map',
        \ '*.css', '*.class'
        \ ])
'''

[[plugins]]
repo = 'nixprime/cpsm'
build = 'env PY3=ON ./install.sh'

#########################################
# Change window's size settings
#########################################
[[plugins]]
repo = 'simeji/winresizer'
hook_add = '''
nnoremap [call]t :WinResizerStartResize<CR>
'''

#########################################
# To make git unable even in vim
#########################################
[[plugins]]
repo = 'tpope/vim-fugitive'
hook_add = '''
nmap [figitive] <Nop>
map <C-g> [figitive]
nmap <silent> [figitive]<C-s> :<C-u>Gstatus<CR>
nmap <silent> [figitive]<C-d> :<C-u>Gdiff<CR>
nmap <silent> [figitive]<C-b> :<C-u>Gblame<CR>
nmap <silent> [figitive]<C-l> :<C-u>Glog<CR>
nmap <silent> [figitive]<C-r> :<C-u>Gread<CR>
nmap <silent> [figitive]<C-a> :<C-u>Gwrite<CR>
'''

#########################################
# Nerdtree settings
#########################################
[[plugins]]
repo = 'scrooloose/nerdtree'
hook_add = '''
map <silent> [call]b :NERDTreeToggle<CR>
'''
[[plugins]]
repo = 'tiagofumo/vim-nerdtree-syntax-highlight'
hook_add = '''
let g:NERDTreeLimitedSyntax = 1
'''

#########################################
# Auto coding settings
#########################################
[[plugins]]
repo = 'cohama/lexima.vim'
hook_add = '''

let g:lexima_enable_newline_rules	= 1
let g:lexima_enable_space_rules = 1

" My comma rule
call lexima#add_rule({
\   "at" : '\%#',
\   "char" : ",",
\   "input" : ",<Space>",
\})

call lexima#add_rule({
\   "at" : ', \%#',
\   "char" : '<Space>',
\   "input" : "",
\})

" If b:lexima_disabled is 1, lexima plugin will not work.
nnoremap <silent> [call]2 :call <SID>toggle_auto_coding()<CR>
function! s:toggle_auto_coding()
    if exists("b:lexima_disabled")
        if b:lexima_disabled
            let b:lexima_disabled = 0
            echo 'lexima is enabled'
        else
            let b:lexima_disabled = 1
            echo 'lexima is disabled'
        endif
    else
        let b:lexima_disabled = 1
        echo 'lexima is disabled'
    endif

endfunction

'''
#########################################
# YCM settings
#########################################
[[plugins]]
repo = 'Valloric/YouCompleteMe'
hook_add = '''

let g:ycm_confirm_extra_conf = 0
let g:ycm_global_ycm_extra_conf = '~/.cache/dein/repos/github.com/Valloric/YouCompleteMe/third_party/ycmd/examples/.ycm_extra_conf.py'
let g:ycm_always_populate_location_list = 1
imap <expr> <tab> pumvisible() ? "\<c-n>" : "\<tab>"
nnoremap <silent> [call]j :lnext<CR>
nnoremap <silent> [call]k :lprevious<CR>
augroup c_mapping

autocmd!
autocmd FileType c nnoremap [call]f :YcmCompleter FixIt<CR>
augroup END
'''
merged = 0

[[plugins]]
repo = 'rdnetto/YCM-Generator'

[[plugins]]
repo = 'ervandew/supertab'

[[plugins]]
repo = 'honza/vim-snippets'

[[plugins]]
repo = 'eclipse/eclipse.jdt.ls'

[[plugins]]
repo = 'SirVer/ultisnips'
hook_add = '''

"Completion Config
let g:UltiSnipsSnippetDirectories = [$HOME . '/.cache/dein/repos/github.com/honza/vim-snippets/custom']
let g:ycm_autoclose_preview_window_after_insertion = 1
let g:ycm_add_preview_to_completeopt=0
let g:syntastic_java_checkers = []
let g:EclimFileTypeValidate = 0
let g:SuperTabDefaultCompletionType    = '<C-k>'
let g:SuperTabCrMapping                = 0
let g:UltiSnipsExpandTrigger           = '<C-k>'
let g:UltiSnipsJumpForwardTrigger      = '<tab>'
let g:UltiSnipsJumpBackwardTrigger     = '<s-tab>'
let g:UltiSnipsEditSplit="vertical"

"Python path Config
let g:ycm_python_binary_path = 'python'
'''
#########################################
# Surround settings
#########################################
[[plugins]]
repo = 'tpope/vim-surround'

#########################################
# Dispaly idnent vertically line
#########################################
[[plugins]]
repo = 'Yggdroot/indentLine'

hook_add = '''
nnoremap <silent> [call]it :IndentLinesToggle<CR>
let g:indentLine_color_term = 239
'''

#########################################
# Vim-tags settings
#########################################
[[plugins]]
repo = 'szw/vim-tags'

hook_add = '''
 let g:vim_tags_auto_generate = 0

" Update tags
nnoremap [call]cg :TagsGenerate<CR>
nmap [call]co &:tag <C-r>"
nnoremap <C-h> :vsp<CR> :exe("tjump ".expand('<cword>'))<CR>
nnoremap [call]cj <C-w>}
" Close Tlist besides
nnoremap <silent> [call]cc :pc<CR>:TlistClose<CR>

" Register ctags directory
au BufNewFile,BufRead * let g:currentFileDirectory = expand('%:p:h')
au BufNewFile,BufRead *.java let g:vim_tags_project_tags_command = "/usr/local/bin/ctags -R -a -f ~/.tagList/java.tags " . g:currentFileDirectory
au BufNewFile,BufRead *.py let g:vim_tags_project_tags_command = "/usr/local/bin/ctags -R -a -f ~/.tagList/py.tags " . g:currentFileDirectory
au BufNewFile,BufRead *.js let g:vim_tags_project_tags_command = "/usr/local/bin/ctags -R -a -f ~/.tagList/js.tags " . g:currentFileDirectory
au BufNewFile,BufRead *.php let g:vim_tags_project_tags_command = "/usr/local/bin/ctags -R -a -f ~/.tagList/php.tags " . g:currentFileDirectory
au BufNewFile,BufRead *.scss let g:vim_tags_project_tags_command = "/usr/local/bin/ctags -R -a -f ~/.tagList/scss.tags " . g:currentFileDirectory

" Set tags
au BufNewFile,BufRead *.java set tags=$HOME/.tagList/java.tags
au BufNewFile,BufRead *.py set tags=$HOME/.tagList/py.tags
au BufNewFile,BufRead *.js set tags=$HOME/.tagList/js.tags
au BufNewFile,BufRead *.php set tags=$HOME/.tagList/php.tags
'''

#########################################
# Ctags setting
#########################################
[[plugins]]
repo = 'vim-scripts/taglist.vim'
hook_add = '''
nnoremap <silent> [call]cl :TlistToggle<CR>/

" Original javascript settings
let g:tlist_javascript_settings = 'js;n:constant;o:object;c:class;f:function;m:method;v:variable'
let g:tlist_python_settings = 'Python;c:classes;f:functions;m:class members;v:variables;i:imports'
let g:tlist_scss_settings = 'scss;m:mixins;v:variables;c:classes;i:ids;d:media'
let g:Tlist_GainFocus_On_ToggleOpen = 1
let g:Tlist_Exit_OnlyWindow = 1
let g:Tlist_Auto_Highlight_Tag = 1
let g:Tlist_Show_One_File = 1
let g:Tlist_Display_Prototype = 1
let g:Tlist_Process_File_Always = 1
let g:Tlist_Close_On_Select = 1
let Tlist_Ctags_Cmd = "/usr/local/bin/ctags"
'''

#########################################
# Syntac highlight
#########################################
[[plugins]]
repo = 'sheerun/vim-polyglot'
