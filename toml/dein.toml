#########################################
# Dein plugin manager settings
#########################################
[[plugins]]
repo = 'Shougo/dein.vim'
hook_add = '''
let g:python_host_prog = expand('~/.pyenv/versions/2.7.13/bin/python2')
let g:python3_host_prog = expand('~/.pyenv/versions/3.7.2/bin/python3')
let g:ruby_host_prog = $HOME . '/.rbenv/shims/ruby'
autocmd VimEnter * call dein#call_hook('post_source')
'''

#########################################
# Deoplete settings
#########################################
[[plugins]]
repo = 'Shougo/deoplete.nvim'
hook_add = '''
let g:deoplete#enable_at_startup = 1

" Close popup when press enter key
inoremap <silent> <CR> <C-r>=<SID>my_cr_function()<CR>
function! s:my_cr_function() abort
  return deoplete#close_popup() . "\<CR>"
endfunction

" Able to Select candidate with tab key
imap <expr><TAB> pumvisible() ? "<C-n>" : "<TAB>"
imap <expr><S-TAB> pumvisible() ? "<C-p>" : "<S-TAB>"
'''

#########################################
# Denite settings
#########################################
[[plugins]]
repo = 'Shougo/denite.nvim'
hook_add = '''
noremap [denite] <Nop>
map s [denite]

" mapping
nnoremap <silent> [denite]p :<C-u>DeniteProjectDir file/rec -start-filter=v:true<CR>
nnoremap <silent> [denite]r :<C-u>DeniteBufferDir file/rec -start-filter=v:true<CR>
nnoremap <silent> [denite]b :<C-u>Denite buffer <CR>
nnoremap <silent> [denite]y :<C-u>Denite file/old -start-filter=v:true<CR>
nnoremap <silent> [denite]s :<C-u>DeniteCursorWord grep <CR>
nnoremap <silent> [denite]w :<C-u>DeniteProjectDir grep <CR>
nnoremap <silent> [denite]c :<C-u>DeniteProjectDir colorscheme -start-filter=v:true<CR>

" Define ignore_globs
let s:ignore_globs = [
  \ '.git/', '.gomi/', '.undo/',
  \ 'images/', '*.o', '*.make',
  \ '*.min.*', 'img/', 'fonts/',
  \ '.DS_Store', '.eslintcache',
  \ '.npm', 'node_modules/', 'jspm_packages/',
  \ 'build/Release', '.lock-wscript', 'bower_components',
  \ '.grunt', '.nyc_output', 'coverage',
  \ 'lib-cov', '*.pid', 'pids', 'venv/',
  \ '*.seed', '*.pid.lock', 'logs',
  \ '*.log', 'npm-debug.log*', 'yarn-debug.log',
  \ 'yarn-error.log', '*.?*cache*', '*css.map',
  \ '*.css', '*.class', '.ropeproject/', '__pycache__/',
  \ ]

" Define mappings
	autocmd FileType denite call s:denite_my_settings()
	function! s:denite_my_settings()
	  nnoremap <silent><buffer><expr> <CR> denite#do_map('do_action')

    " Open a selected file with vsplit
	  nnoremap <silent><buffer><expr> ` denite#do_map('do_action', 'vsplit')

	  nnoremap <silent><buffer><expr> d denite#do_map('do_action', 'delete')
	  nnoremap <silent><buffer><expr> p denite#do_map('do_action', 'preview')
	  nnoremap <silent><buffer><expr> q denite#do_map('quit')
	  nnoremap <silent><buffer><expr> i denite#do_map('open_filter_buffer')
	  nnoremap <silent><buffer><expr> <Space> denite#do_map('toggle_select').'j'
	endfunction

	" For python script scantree.py
	" Read bellow on this file to learn more about scantree.py
	call denite#custom#var('file/rec', 'command', ['scantree.py'])

	" Change matchers.
	call denite#custom#source(
	\ 'file/rec', 'matchers', ['matcher/ignore_globs'])
	call denite#custom#source(
	\ 'file/old', 'matchers', ['matcher/ignore_globs'])

	" Change sorters.
	call denite#custom#source(
	\ 'file/rec', 'sorters', ['sorter/sublime'])
	call denite#custom#source(
	\ 'file/rec', 'sorters', ['sorter/sublime'])

	" Add custom menus
	let s:menus = {}

	let s:menus.zsh = {
		\ 'description': 'Edit your import zsh configuration'
		\ }
	let s:menus.zsh.file_candidates = [
		\ ['zshrc', '~/.config/zsh/.zshrc'],
		\ ['zshenv', '~/.zshenv'],
		\ ]

	let s:menus.my_commands = {
		\ 'description': 'Example commands'
		\ }
	let s:menus.my_commands.command_candidates = [
		\ ['Split the window', 'vnew'],
		\ ['Open zsh menu', 'Denite menu:zsh'],
		\ ['Format code', 'FormatCode', 'go,python'],
		\ ]

	call denite#custom#var('menu', 'menus', s:menus)

	" Ag command on grep source
	call denite#custom#var('grep', 'command', ['ag'])
	call denite#custom#var('grep', 'default_opts',
			\ ['-i', '--vimgrep'])
	call denite#custom#var('grep', 'recursive_opts', [])
	call denite#custom#var('grep', 'pattern_opt', [])
	call denite#custom#var('grep', 'separator', ['--'])
	call denite#custom#var('grep', 'final_opts', [])

	" Specify multiple paths in grep source
	"call denite#start([{'name': 'grep',
	"      \ 'args': [['a.vim', 'b.vim'], '', 'pattern']}])

	" Define alias
	call denite#custom#alias('source', 'file/rec/git', 'file/rec')
	call denite#custom#var('file/rec/git', 'command',
	      \ ['git', 'ls-files', '-co', '--exclude-standard'])

	call denite#custom#alias('source', 'file/rec/py', 'file/rec')
	call denite#custom#var('file/rec/py', 'command',['scantree.py'])

	" Change ignore_globs
	call denite#custom#filter('matcher/ignore_globs', 'ignore_globs', s:ignore_globs)
	call denite#custom#filter('matcher/cpsm', 'ignore_globs', s:ignore_globs)

	" Custom action
	" Note: lambda function is not supported in Vim8.
	call denite#custom#action('file', 'test', {context -> execute('let g:foo = 1')})
	call denite#custom#action('file', 'test2',
    \ {context -> denite#do_action(context, 'open', context['targets'])})

'''

[[plugins]]
repo = 'nixprime/cpsm'
build = 'env PY3=ON ./install.sh'

#########################################
# Change window's size settings
#########################################
[[plugins]]
repo = 'simeji/winresizer'
hook_add = '''
nnoremap [call]t :WinResizerStartResize<CR>
'''

#########################################
# Nerdtree settings
#########################################
[[plugins]]
repo = 'scrooloose/nerdtree'
hook_add = '''
map <silent> [call]b :NERDTreeToggle<CR>
'''
[[plugins]]
repo = 'tiagofumo/vim-nerdtree-syntax-highlight'
hook_add = '''
let g:NERDTreeLimitedSyntax = 1
'''

#########################################
# Surround settings
#########################################
[[plugins]]
repo = 'tpope/vim-surround'

#########################################
# Dispaly idnent vertically line
#########################################
[[plugins]]
repo = 'Yggdroot/indentLine'

hook_add = '''
nnoremap <silent> [call]it :IndentLinesToggle<CR>
let g:indentLine_color_term = 113
'''

#########################################
# Vim-tags settings
#########################################
[[plugins]]
repo = 'szw/vim-tags'

hook_add = '''
 let g:vim_tags_auto_generate = 0

" Update tags
nnoremap [call]cg :TagsGenerate<CR>
nmap [call]co &:tag <C-r>"
nnoremap <C-h> :vsp<CR> :exe("tjump ".expand('<cword>'))<CR>
nnoremap [call]cj <C-w>}
" Close Tlist besides
nnoremap <silent> [call]cc :pc<CR>:TlistClose<CR>

" Register ctags directory
au BufNewFile,BufRead * let g:currentFileDirectory = expand('%:p:h')
au BufNewFile,BufRead *.java let g:vim_tags_project_tags_command = "/usr/local/bin/ctags -R -a -f ~/.tagList/java.tags " . g:currentFileDirectory
au BufNewFile,BufRead *.py let g:vim_tags_project_tags_command = "/usr/local/bin/ctags -R -a -f ~/.tagList/py.tags " . g:currentFileDirectory
au BufNewFile,BufRead *.js let g:vim_tags_project_tags_command = "/usr/local/bin/ctags -R -a -f ~/.tagList/js.tags " . g:currentFileDirectory
au BufNewFile,BufRead *.php let g:vim_tags_project_tags_command = "/usr/local/bin/ctags -R -a -f ~/.tagList/php.tags " . g:currentFileDirectory
au BufNewFile,BufRead *.scss let g:vim_tags_project_tags_command = "/usr/local/bin/ctags -R -a -f ~/.tagList/scss.tags " . g:currentFileDirectory

" Set tags
au BufNewFile,BufRead *.java set tags=$HOME/.tagList/java.tags
au BufNewFile,BufRead *.py set tags=$HOME/.tagList/py.tags
au BufNewFile,BufRead *.js set tags=$HOME/.tagList/js.tags
au BufNewFile,BufRead *.php set tags=$HOME/.tagList/php.tags
'''

#########################################
# Ctags setting
#########################################
[[plugins]]
repo = 'vim-scripts/taglist.vim'
hook_add = '''
nnoremap <silent> [call]cl :TlistToggle<CR>/

" Original javascript settings
let g:tlist_javascript_settings = 'js;n:constant;o:object;c:class;f:function;m:method;v:variable'
let g:tlist_python_settings = 'Python;c:classes;f:functions;m:class members;v:variables;i:imports'
let g:tlist_scss_settings = 'scss;m:mixins;v:variables;c:classes;i:ids;d:media'
let g:Tlist_GainFocus_On_ToggleOpen = 1
let g:Tlist_Exit_OnlyWindow = 1
let g:Tlist_Auto_Highlight_Tag = 1
let g:Tlist_Show_One_File = 1
let g:Tlist_Display_Prototype = 1
let g:Tlist_Process_File_Always = 1
let g:Tlist_Close_On_Select = 1
let Tlist_Ctags_Cmd = "/usr/local/bin/ctags"
'''

#########################################
# Syntac highlight
#########################################
[[plugins]]
repo = 'sheerun/vim-polyglot'
