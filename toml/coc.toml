# ===== Language servers settings =====
[[plugins]]
repo = 'neoclide/coc.nvim'
merged = 0
rev = 'release'
trusted = 1
hook_add = '''
" if hidden is not set, TextEdit might fail.
set hidden

" Some servers have issues with backup files, see #649
set nobackup
set nowritebackup

" Better display for messages
set cmdheight=2

" Smaller updatetime for CursorHold & CursorHoldI
set updatetime=300

" don't give |ins-completion-menu| messages.
set shortmess+=c

" always show signcolumns
set signcolumn=yes

" Use tab for trigger completion with characters ahead and navigate.
" Use command ':verbose imap <tab>' to make sure tab is not mapped by other plugin.
inoremap <silent><expr> <TAB>
  \ pumvisible() ? "\<C-n>" :
  \ <SID>check_back_space() ? "\<TAB>" :
  \ coc#refresh()
inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

" Use <c-space> to trigger completion.
inoremap <silent><expr> <c-space> coc#refresh()

" Use <CR> to confirm completion, `<C-g>u` means break undo chain at current position.
" Coc only does snippet and additional edit on confirm.
inoremap <expr> <CR> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"

" Remap keys for gotos
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)
nmap <silent> gb <C-o>

" Use K to show documentation in preview window
nnoremap <silent> <space>d :call <SID>show_documentation()<CR>

function! s:show_documentation()
  if (index(['vim','help'], &filetype) >= 0)
    execute 'h '.expand('<cword>')
  else
    call CocAction('doHover')
  endif
endfunction

" Highlight symbol under cursor on CursorHold
autocmd CursorHold * silent call CocActionAsync('highlight')

" Remap for rename current word
nmap <space>rn <Plug>(coc-rename)

" Remap for format selected region
xmap <space>f  <Plug>(coc-format-selected)
nmap <space>f  <Plug>(coc-format-selected)

augroup mygroup
  autocmd!
  " Setup formatexpr specified filetype(s).
  autocmd FileType typescript,json setl formatexpr=CocAction('formatSelected')
  " Update signature help on jump placeholder
  autocmd User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')
augroup end

" Remap for do codeAction of selected region, ex: `<space>aap` for current paragraph
xmap <space>a  <Plug>(coc-codeaction-selected)
nmap <space>a  <Plug>(coc-codeaction-selected)

" Remap for do codeAction of current line
nmap <space>ac  <Plug>(coc-codeaction)
" Fix autofix problem of current line
nmap <space>qf  <Plug>(coc-fix-current)

" Use `:Format` to format current buffer
command! -nargs=0 Format :call CocAction('format')

" Use `:Fold` to fold current buffer
command! -nargs=? Fold :call     CocAction('fold', <f-args>)

" For prettier settings
command! -nargs=0 Prettier :CocCommand prettier.formatFile

" ===== Disgnostics ======
nmap <silent> <space>k <Plug>(coc-diagnostic-prev)
nmap <silent> <space>j <Plug>(coc-diagnostic-next)

" ===== Markdown ======
let g:markdown_fenced_languages = ['css', 'javascript', 'js=javascript', 'typescript']

" ===== CocList =====
noremap [coc-list] <Nop>
map s [coc-list]

" Show all diagnostics
nnoremap <silent> <space>a  :<C-u>CocList diagnostics<CR>

" Manage extensions
nnoremap <silent> <space>e  :<C-u>CocList extensions<CR>

" Show commands
nnoremap <silent> <space>c  :<C-u>CocList commands<CR>

" Yank
nnoremap <silent> <space>y     :<C-u>CocList -A --normal yank<CR>

" Find symbol of current document
nnoremap <silent> [coc-list]o  :<C-u>CocList -A outline<CR>

" Search workspace symbols
nnoremap <silent> [coc-list]w  :<C-u>CocList -I symbols<CR>

" Search workspace symbols
nnoremap <silent> [coc-list]g  :<C-u>CocList -I grep<CR>

" Grep current word
nnoremap <silent> [coc-list]s  :exe 'CocList -I --input='.expand('<cword>').' grep'<CR>

" File ( Search from project root )
nnoremap <silent> [coc-list]p  :<C-u>CocList files<CR>

" File ( Search from current dir )
nnoremap <silent> [coc-list]r  :exe 'CocList --input='.expand('%:p:h:t'). '/' .' files'<CR>

" Mru
nnoremap <silent> [coc-list]y  :<C-u>CocList mru<CR>

" Buffer
nnoremap <silent> [coc-list]b  :<C-u>CocList buffers<CR>

" help vim
nnoremap <silent> [coc-list]h  :<C-u>CocList helptags<CR>
'''
